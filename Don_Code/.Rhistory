df = read.csv("data.csv")
library("caTools")
library("dplyr")
set.seed(1234)
split = sample.split(df$diagnosis, SplitRatio = 0.7)
Train = subset(df, split == TRUE)
Test = subset(df, split == FALSE)
1-sum(Test$diagnosis)/nrow(Test)
df.logReg = glm(diagnosis ~ ., data = Train, family = binomial)
summary(df.logReg)
rm(list=ls())
cat("\04")
df = read.csv("data.csv")
library("caTools")
library("dplyr")
set.seed(1234)
split = sample.split(df$diagnosis, SplitRatio = 0.7)
Train = subset(df, split == TRUE)
Test = subset(df, split == FALSE)
1-sum(Test$diagnosis)/nrow(Test)
View(df)
df.logReg = glm(diagnosis ~ ., data = Train, family = binomial)
summary(df.logReg)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Load library
library(GGally)
library(ggplot2)
# Correlation matrix, density curve, and scatterplot of means
ggpairs(df[,c(1:10,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(11:20,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="SE") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(21:30,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Worst") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point",
repel=TRUE,
legend.title="Malignant Ind",
addEllipses = TRUE)
# Create new data set with PCA
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- data.frame(df.pca.pred[])
df.pca$f_diagnosis_m <- df.sc[, 32]
head(df.pca)
# Split data into train and test
split <- sample.split(df$f_diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Split PCA data set
split.pca <- sample.split(df.pca$f_diagnosis_m, SplitRatio = .70)
df.train.pca <- subset(df.pca, split == TRUE)
df.test.pca <- subset(df.pca, split == FALSE)
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
# Build logistic regression model
df.train.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train, family = binomial(logit))
summary(df.train.log)
# Apply model to training set
pred.train <- predict(df.train.log, type='response')
table(df.train$f_diagnosis_m, round(pred.train))
# Apply model on test data
pred.test.log <- predict(df.train.log, newdata = df.test, type='response')
df.test$pred_log <- pred.test.log
# Calculate test accuracy
accuracy.test.log <- table(df.test$f_diagnosis_m, round(pred.test.log))
accuracy.test.log
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point",
repel=TRUE,
legend.title="Malignant Ind",
addEllipses = TRUE)
# Create new data set with PCA
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- data.frame(df.pca.pred[])
df.pca$f_diagnosis_m <- df.sc[, 32]
head(df.pca)
# Split data into train and test
split <- sample.split(df$f_diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Split PCA data set
split.pca <- sample.split(df.pca$f_diagnosis_m, SplitRatio = .70)
df.train.pca <- subset(df.pca, split == TRUE)
df.test.pca <- subset(df.pca, split == FALSE)
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
# Build logistic regression model
df.train.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train, family = binomial(logit))
summary(df.train.log)
# Apply model to training set
pred.train <- predict(df.train.log, type='response')
table(df.train$f_diagnosis_m, round(pred.train))
# Apply model on test data
pred.test.log <- predict(df.train.log, newdata = df.test, type='response')
df.test$pred_log <- pred.test.log
# Calculate test accuracy
accuracy.test.log <- table(df.test$f_diagnosis_m, round(pred.test.log))
accuracy.test.log
# Build logistic regression model for PCA data set
df.train.pca.log <- glm(f_diagnosis_m ~ PC1 + PC2 + PC3 + PC4 + PC5 , data = df.train.pca, family = binomial(logit))
summary(df.train.pca.log)
# Apply model to training set
pred.train.pca <- predict(df.train.pca.log, type='response')
table(df.train.pca$f_diagnosis_m, round(pred.train.pca))
# Apply model on test data
pred.test.log.pca <- predict(df.train.pca.log, newdata = df.test.pca, type='response')
df.test$pred_log_pca <- pred.test.log.pca
# Calculate test accuracy
accuracy.test.log.pca <- table(df.test$f_diagnosis_m, round(pred.test.log.pca))
accuracy.test.log.pca
# Load library
library(GGally)
library(ggplot2)
# Correlation matrix, density curve, and scatterplot of means
ggpairs(df[,c(1:10,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(11:20,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="SE") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(21:30,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Worst") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
summary(df)
names(df)
# Data values overview
head(df)
es)
library(fastDummies)
library(janitor)
library('caTools')
library(tidyverse)
# Data values overview
head(df)
df %>% select(id, X, diagnosis)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
library(tidyverse)
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
library(tidyverse)
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Load library
library(GGally)
library(ggplot2)
# Correlation matrix, density curve, and scatterplot of means
ggpairs(df[,c(1:10,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(11:20,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="SE") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(21:30,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Worst") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
library(tidyverse)
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point",
repel=TRUE,
legend.title="Malignant Ind",
addEllipses = TRUE)
# Create new data set with PCA
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- data.frame(df.pca.pred[])
df.pca$f_diagnosis_m <- df.sc[, 32]
head(df.pca)
# Split data into train and test
split <- sample.split(df$f_diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Split PCA data set
split.pca <- sample.split(df.pca$f_diagnosis_m, SplitRatio = .70)
df.train.pca <- subset(df.pca, split == TRUE)
df.test.pca <- subset(df.pca, split == FALSE)
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
# Build logistic regression model
df.train.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train, family = binomial(logit))
summary(df.train.log)
# Apply model to training set
pred.train <- predict(df.train.log, type='response')
table(df.train$f_diagnosis_m, round(pred.train))
# Apply model on test data
pred.test.log <- predict(df.train.log, newdata = df.test, type='response')
df.test$pred_log <- pred.test.log
# Calculate test accuracy
accuracy.test.log <- table(df.test$f_diagnosis_m, round(pred.test.log))
accuracy.test.log
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
library(tidyverse)
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Load library
library(GGally)
library(ggplot2)
# Correlation matrix, density curve, and scatterplot of means
ggpairs(df[,c(1:10,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(11:20,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="SE") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(21:30,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Worst") +
theme(plot.title = element_text(face='bold', color='--black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
