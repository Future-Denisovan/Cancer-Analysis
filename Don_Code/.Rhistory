title="Means")
+ theme_bw()
+ theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom")
# Load library
library(GGally)
# Violin plots
# df %>% ggplot(aes(x=diagnosis_m, y=radius_mean)) +
#   geom_violin() +
#   geom_boxplot(width=0.1)
# Correlation & scatterplot matrix of means
ggpairs(df[,c(1:11,31)],
aes(color=diagnosis_m, alpha=0.75),
lower=list(continuous="smooth"))
+ theme_bw()
# Load library
library(GGally)
# Violin plots
# df %>% ggplot(aes(x=diagnosis_m, y=radius_mean)) +
#   geom_violin() +
#   geom_boxplot(width=0.1)
# Correlation & scatterplot matrix of means
ggpairs(df[,c(1:11,31)],
aes(color=diagnosis_m, alpha=0.75),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom")
# Correlation & scatterplot matrix of means
ggpairs(df[,c(1:11,31)],
aes(color=diagnosis_m, alpha=0.75),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom")+theme( strip.text = element_text(size = 5))
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
install.packages("devtools")
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
library(devtools)
install.packages("backports")
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
install.packages("glue")
install.packages("glue")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
install.packages("glue")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
install_github("vqv/ggbiplot")
# install_github("vqv/ggbiplot")
library(ggbiplot)
nstall_github("ggbiplot", "vqv")
install_github("ggbiplot", "vqv")
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(devtools)
install_github("ggbiplot", "vqv")
install_github("vqv/ggbiplot")
library(ggbiplot)
library(devtools)
library(ggbiplot)
library(ggbiplot)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
library(ggbiplot)
library(ggplot2)
library(devtools)
library(ggbiplot)
install_github("vqv/ggbiplot")
install.packages("factoextra")
library(factoextra)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
# Biplot
fviz_pca_biplot(df.pc, col.ind = df$f_diagnosis_m, col="black",
palette = "jco", geom = "point", repel=TRUE,
legend.title="Diagnosis", addEllipses = TRUE)
# Biplot
fviz_pca_biplot(df.pc, col.ind = df$f_diagnosis_m, col="black",
geom = "point", repel=TRUE,
legend.title="Malignant Ind", addEllipses = TRUE)
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point", repel=TRUE,
legend.title="Malignant Ind", addEllipses = TRUE)
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point",
repel=TRUE,
legend.title="Malignant Ind",
addEllipses = TRUE)
# Split data into train and test
split <- sample.split(df$diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Check proportions of malignant in train and test
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
View(df.train)
# Build logistic regression model
df.train.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train, family = binomial)
summary(df.train.log)
# Apply model to training set
pred.train <- predict(df.train, type='response')
# Apply model to training set
pred.train <- predict(df.train.log, type='response')
table(df.train$f_diagnosis_m, round(pred.train))
# Build logistic regression model
df.train.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train, family = binomial(logit))
summary(df.train.log)
# Apply model to training set
pred.train <- predict(df.train.log, type='response')
table(df.train$f_diagnosis_m, round(pred.train))
summary(df.train.log)
# Pred
df.pca.pred <- predict(df.pc, df.sc)
View(df.pca.pred)
df.pca <- df[, 32:32]
df.pca[, 2:31] <- car.pred
df.pca[, 2:31] <- df.pca.pred
df.pca[,1] <- df[, 32:32]
df.pca[,1:1] <- df[, 32:32]
# Pred
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- df.pca.pred
View(df.pca)
df[.32]
df[,32]
df.pca[,31] <- df[, 32]
df.pca$f_diagnosis_m <- df[, 32]
head(df.pca)
# Pred
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- df.pca.pred
df.pca$f_diagnosis_m <- df[, 32]
head(df.pca)
# Pred
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- df.pca.pred
View(df.pca)
df.pca$f_diagnosis_m <- df[, 32]
# Pred
df.pca.pred <- predict(df.pc, df.sc)
head(df.pca)
# Pred
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- df.pca.pred
# Pred
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- data.frame(df.pca.pred)
df.pca$f_diagnosis_m <- df[, 32]
head(df.pca)
View(df.pca.pred)
knitr::opts_chunk$set(echo = TRUE, comment = NA, message = FALSE,
fig.width = 4.5, fig.height = 4.5, fig.align = "center")
getwd()
#setWd
rm(list=ls())
cat("\04")
car <- read.csv("car-ratings.csv")
head(car)
tail(car)
library(psych)
describe(car)
car.sc <- car
car.sc[, 4:9] <- scale(car.sc[,4:9])
describe(car.sc)
car.sc2 <- car
car.sc2 <- scale(car.sc[,4:9])
cor(car.sc[, 4:9])
install.packages("corrplot")
library(corrplot)
corrplot(cor(car.sc[, 4:9]), order="hclust")
car.mean <- aggregate(. ~ Car, data=car.sc[, 3:9], mean)
car.mean
library(gplots)
library(RColorBrewer)
heatmap.2(as.matrix(car.mean[, 2:7]), col = brewer.pal(9, "RdPu"),
trace = "none", key = FALSE, dend = "none",  ylab = "Car",
main = "\n\n\n Brand Attributes")
car.pc = prcomp(car.sc[,4:9])
summary(car.pc)
car.pc$rotation
plot(car.pc, type='l')
biplot(car.pc, xlim=c(-.2,.2), ylim=c(-.15,.15))
abline(h = 0, v = 0, col = "gray60")
car.pred <- predict(car.pc, car.sc)
car.pca <- car[, 1:3]
car.pca[, 4:9] <- car.pred
head(car.pca)
carpca.mean <- aggregate(. ~ Car, data=car.pca[, 3:9], mean)
carpca.mean
View(car.pca)
View(car.pred)
car.pred <- predict(car.pc, car.sc)
car.pca <- car[, 1:3]
View(car.pca)
car.pca[, 4:9] <- car.pred
head(car.pca)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Scale data set
df.sc <- df
df.sc[,1:30] <- scale(df[,1:30])
# Perform pca and output results
df.pc = prcomp(df.sc[,1:30])
summary(df.pc)
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
# Biplot
fviz_pca_biplot(df.pc,
col.ind = df$f_diagnosis_m,
col="black",
geom = "point",
repel=TRUE,
legend.title="Malignant Ind",
addEllipses = TRUE)
View(df.sc)
# Create new data set with PCA
df.pca.pred <- predict(df.pc, df.sc)
df.pca <- data.frame(df.pca.pred[])
df.pca$f_diagnosis_m <- df.sc[, 32]
head(df.pca)
# Split data into train and test
split <- sample.split(df$diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Split PCA data set
split.pca <- sample.split(df.pca$diagnosis_m, SplitRatio = .70)
# Split data into train and test
split <- sample.split(df$f_diagnosis_m, SplitRatio = .70)
df.train <- subset(df, split == TRUE)
df.test <- subset(df, split == FALSE)
# Split PCA data set
split.pca <- sample.split(df.pca$f_diagnosis_m, SplitRatio = .70)
df.train.pca <- subset(df.pca, split == TRUE)
df.test.pca <- subset(df.pca, split == FALSE)
# Check proportions of malignant in train and test
sum(df.train$diagnosis_m)/nrow(df.train)
sum(df.test$diagnosis_m)/nrow(df.test)
# Build logistic regression model for PCA data set
df.train.pca.log <- glm(f_diagnosis_m ~ . - diagnosis_m, data = df.train.pca, family = binomial(logit))
# Build logistic regression model for PCA data set
df.train.pca.log <- glm(f_diagnosis_m ~ . , data = df.train.pca, family = binomial(logit))
summary(df.train.pca.log)
knitr::opts_chunk$set(echo = TRUE)
# Clear Environment
rm(list=ls())
cat("\04")
# Set Working Directory
# getwd()
# setwd()
# Set seed
set.seed(1234)
# Load library
library(fastDummies)
library(janitor)
library('caTools')
# Load data and clean
df <- read.csv('data.csv')
# Data values overview
head(df)
# Dummy diagnosis variable
df <- dummy_cols(df, select_columns = 'diagnosis')
# Remove unneeded columns cannot be used for modeling
df$X <- NULL
df$id <- NULL
df$diagnosis <- NULL
df$diagnosis_B <- NULL
# Clean header names
df <- clean_names(df)
df$f_diagnosis_m <- as.factor(df$diagnosis_m)
head(df)
# Load library
library(psych)
# Summary of data
describe(df[1:30])
# Proportion of malignant (1) vs benign (0)
sum(df$diagnosis_m)/nrow(df)
# Load library
library(GGally)
library(ggplot2)
# Correlation matrix, density curve, and scatterplot of means
ggpairs(df[,c(1:10,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Means") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(11:20,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="SE") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
ggpairs(df[,c(21:30,32)],
aes(color=f_diagnosis_m, alpha = 0.5),
lower=list(continuous="smooth")) +
theme_bw() +
labs(title="Worst") +
theme(plot.title = element_text(face='bold', color='black', hjust=0.5, size=12),
legend.position = "bottom",
strip.text = element_text(size=6.5))
# Load library
library(factoextra)
# Screeplot
plot(df.pc, type='l', main='PCA - Screeplot')
